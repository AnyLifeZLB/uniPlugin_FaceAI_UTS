import { ISFaceExist,AddFaceImage, OnMemoryInfoChange, OffMemoryInfoChange,baseInputJSON } from '../interface.uts'

import Log from 'android.util.Log';
import Application from 'android.app.Application';
import Activity from 'android.app.Activity';
import Bundle from 'android.os.Bundle';
import Intent from 'android.content.Intent';
import IntentFilter from 'android.content.IntentFilter';
import Context from 'android.content.Context';
import Toast from 'android.widget.Toast';

import { getUniActivity } from "io.dcloud.uts.android"

import R from 'uts.sdk.modules.uniFaceAISDK.R';
import { FaceAISDKNative } from "uts.sdk.modules.uniFaceAISDK"
import { FaceRecognitionActivity } from "uts.sdk.modules.uniFaceAISDK"
import { AddFaceImageActivity } from "com.ai.face.addFaceImage"
import { FaceVerificationActivity } from "com.ai.face.verify"

import { FaceAIConfig } from "com.ai.face"


/**
 * 跳转到Android SDK 中原生页面处理人脸录入
 * 
 * @param faceID 用户ID
 * @param callback 结果回调
 */
export const addFaceImage : AddFaceImage = function (
	faceID : string,
	callback : (result : UTSJSONObject) => void
) {
	// 获取当前Activity上下文
	const context = UTSAndroid.getUniActivity() as Activity
	// 初始化配置
	FaceAIConfig.init(context);

	const intent = new Intent(context, AddFaceImageActivity().javaClass)
	intent.putExtra("ADD_FACE_IMAGE_TYPE_KEY", "FACE_VERIFY");
	intent.putExtra("USER_FACE_ID_KEY", faceID);

	context.startActivityForResult(intent, 10086)

	UTSAndroid.onAppActivityResult((requestCode : Int, resultCode : Int, data ?: Intent) => {
		if (requestCode == 10086) {
			if(resultCode == -1){
				const jsonResult = new UTSJSONObject()
				jsonResult.set("code",1)
				jsonResult.set("msg", "OK")
				jsonResult.set("faceID", faceID)
				jsonResult.set("faceBase64","faceBase64")
				callback(jsonResult)
				console.log(jsonResult);
			}else{
				
			}

		} 
	});
	
}


/**
 *  调用原生的FaceAISDK 功能 isFaceExist 人脸是否存在
 */
export const isFaceExist : ISFaceExist = function (faceID : string, callback : (output : UTSJSONObject) => void) {
	FaceAISDKNative.isFaceExistKotlin(faceID, function (output : UTSJSONObject) {
		callback(output as UTSJSONObject)
	})
}
 


// 开启内存监听
export const onMemoryInfoChange : OnMemoryInfoChange = function (callback : (res : Array<number>) => void) {
	FaceAISDKNative.onMemoryInfoChangeKotlin(function (res : kotlin.Array<number>) {
		callback(Array.fromNative(res))
	})
}



export const offMemoryInfoChange : OffMemoryInfoChange = function () {
	FaceAISDKNative.offMemoryInfoChangeKotlin()
}